services:
  centauri:
    container_name: "centauri"
    image: "ghcr.io/csmith/centauri"
    restart: "always"
    ports:
      - "80:8080"
      - "443:8443"
    volumes:
      - "config:/config"
      - "./data:/data"
    networks:
      - "centauri"
    environment:
      CONFIG: "/config/centauri.conf"
      USER_DATA: "/data/user.json"
      CERTIFICATE_STORE: "/data/certs.json"
      ACME_EMAIL: "you@example.com"

      # Centauri uses DNS challenges to prove domain ownership. See the Lego docs for all available
      # providers and their configuration: https://go-acme.github.io/lego/dns/
      DNS_PROVIDER: "httpreq"
      HTTPREQ_ENDPOINT: "https://api.mydnsprovider.example.com/httpreq"
      HTTPREQ_USERNAME: "dns@example.com"
      HTTPREQ_PASSWORD: "myp@ssw0rd"

  # Dotege monitors docker containers and then generates a config file for Centauri using the
  # supplied template. This allows us to automatically proxy to containers based on their labels.
  dotege:
    image: "ghcr.io/csmith/dotege"
    restart: "always"
    volumes:
      - "config:/data/output"
      - "./centauri.conf.tpl:/data/centauri.conf.tpl:ro"
      - "/var/run/docker.sock:/var/run/docker.sock"
    environment:
      DOTEGE_SIGNAL_CONTAINER: centauri
      DOTEGE_SIGNAL_TYPE: HUP
      DOTEGE_TEMPLATE_SOURCE: /data/centauri.conf.tpl
      DOTEGE_TEMPLATE_DESTINATION: /data/output/centauri.conf
      DOTEGE_CERTIFICATE_DEPLOYMENT: disabled

volumes:
  # Volume to hold the centauri configuration file generated by Dotege.
  config:

networks:
  # Create a network that other contains can be joined to expose them to Centauri.
  centauri:
    name: "centauri"